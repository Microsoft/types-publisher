import * as yargs from "yargs";

import { Options } from "./lib/common";
import NpmClient from "./lib/npm-client";
import { clearOutputPath } from "./lib/package-generator";
import { AllPackages, TypingsData } from "./lib/packages";
import { outputPath } from "./lib/settings";
import { fetchLastPatchNumber } from "./lib/versions";
import { fetchResponse, writeJson } from "./util/io";
import { Logger, logger, writeLog } from "./util/logging";
import { unGzipFileFromTar } from "./util/tgz";
import { done, joinPaths, setDifference } from "./util/util";

const packageName = "types-registry";
const indexJson = "index.json";
const registryOutputPath = joinPaths(outputPath, packageName);
const readme =
`This package contains a listing of all packages published to the @types scope on NPM.
Generated by [types-publisher](https://github.com/Microsoft/types-publisher).`;

if (!module.parent) {
	const dry = !!yargs.argv.dry;
	done(main(Options.defaults, dry));
}

export default async function main(options: Options, dry: boolean): Promise<void> {
	const [log, logResult] = logger();
	log("=== Publishing types-registry ===");

	const oldPatch = await fetchLastPatchNumber(packageName);
	if (await shouldPublishNewRegistry(getVersion(oldPatch), options, log)) {
		log("New packages have been added, so publishing a new registry.");
		await generateAndPublishRegistry(log, getVersion(oldPatch + 1), dry);
	} else {
		log("No new packages published, so no need to publish new registry.");
	}

	await writeLog("publish-registry.md", logResult());
}

interface TypesRegistry {
	entries: { [key: string]: 1 };
}

async function shouldPublishNewRegistry(oldVersion: string, options: Options, log: Logger): Promise<boolean> {
	const oldRegistry = await downloadOldRegistry(oldVersion);
	const packages = await AllPackages.read(options);
	const oldPackagesList = Object.keys(oldRegistry.entries);
	const newPackagesList = packages.allTypings().map(t => t.name);

	const { leftExclusive: olds, rightExclusive: news } = setDifference(oldPackagesList, newPackagesList);
	let anyDiff = false;
	for (const old of olds) {
		anyDiff = true;
		log(`Package has been removed: ${old}`);
	}
	for (const nu of news) {
		anyDiff = true;
		log(`Package has been added: ${nu}`);
	}
	return anyDiff;
}

async function downloadOldRegistry(oldVersion: string): Promise<TypesRegistry> {
	const url = `https://registry.npmjs.org/${packageName}/-/${packageName}-${oldVersion}.tgz`;
	const response = await fetchResponse(url);
	return JSON.parse(await unGzipFileFromTar(response, `${packageName}/${indexJson}`));
}

async function generateAndPublishRegistry(log: Logger, newVersion: string, dry: boolean): Promise<void> {
	// Don't include not-needed packages in the registry.
	const typings = await AllPackages.readTypings();

	const packageJson = generatePackageJson(newVersion);

	await generate(typings, packageJson, log);
	await publish(packageJson, dry);
}

async function generate(typings: ReadonlyArray<TypingsData>, packageJson: {}, log: Logger): Promise<void> {
	await clearOutputPath(registryOutputPath, log);
	await writeOutputFile("package.json", packageJson);
	await writeOutputFile(indexJson, generateRegistry(typings));
	await writeOutputFile("README.md", readme);

	function writeOutputFile(filename: string, content: {}): Promise<void> {
		return writeJson(joinPaths(registryOutputPath, filename), content);
	}
}

async function publish(packageJson: {}, dry: boolean): Promise<void> {
	const client = await NpmClient.create();
	await client.publish(registryOutputPath, packageJson, dry);
}

function getVersion(patch: number): string {
	return `0.1.${patch}`;
}

function generatePackageJson(version: string): {} {
	return {
		name: packageName,
		version,
		description: "A registry of TypeScript declaration file packages published within the @types scope.",
		repository: {
			type: "git",
			url: "https://github.com/Microsoft/types-publisher.git"
		},
		keywords: [
			"TypeScript",
			"declaration",
			"files",
			"types",
			"packages"
		],
		author: "Microsoft Corp.",
		license: "MIT"
	};
}

function generateRegistry(typings: ReadonlyArray<TypingsData>): {} {
	const entries: { [packageName: string]: 1 } = {};
	for (const { name } of typings) {
		entries[name] = 1;
	}
	return { entries };
}
